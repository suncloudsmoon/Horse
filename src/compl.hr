/*
 * Copyright (c) 2021, suncloudsmoon and the horse contributors.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * main.c
 *
 *  Created on: Aug 9, 2021
 *      Author: suncloudsmoon
 */

import basics
import errno
import stdarg
import ctype
import string
import time

class compl

#define AVG_STRING_SIZE 32
#define STRING_ALLOCATION_SIZE 5
#define LIST_MANAGER_ALLOC_SIZE 10

typedef enum {
	ERRNO_EXCEPTION = 1,
	NULL_POINTER_EXCEPTION = 2,
	INDEX_OUT_OF_BOUNDS_EXCEPTION = 3
} exception;

typedef struct {
	char *text;
	size_t text_length;
	size_t text_allocated_length;
} string_t;

typedef struct {
	void **data;
	size_t data_length;
	size_t data_allocated_length;
} list_t;

typedef struct {
	list_t *allLines; // List of all lines
	list_t *cleanedLines;
	list_t *parsedLines; // List of parsed lines
	list_t *compiledLines;

	list_t *definitions;
	string_t *includeStatements;
	list_t *classes; // list of class_t

	string_t* directory;
	FILE *inputFile;

	num scope;
	num currentClass; // index of the current class found in the list of classes
} compiler_t;

typedef struct {
	string_t *name;

	// Constructor
	list_t *constructorLines;

	// Inside the class struct stuff
	list_t *globalVariables; // like int a;
	list_t *vTableList; // list of vTable_t

	string_t *includeStatements;
	list_t *definitions; // and definitions
	list_t *prototypes; // function prototypes
	list_t *restOfLines;
} class_t;

typedef struct {
	// like void (*foo) (void);
	string_t *returnType;
	string_t *name;
	list_t *parameters;
} vTable_t;

// Horse Identifiers
const char *doubleSlashComment = "//";

const char *functionIdentifier = "def";
const char *privateFunctionIdentifier = "private def";
const char *endIdentifier = "end";
const char *returnIdentifier = "return";

const char *forIdentifier = "for";
const char *toKeyword = "to";
const char *doKeyword = "do";

const char *thenKeyword = "then";
const char *ifIdentifier = "if"; // for now
const char *elseIfIdentifier = "or if";
const char *elseIdentifier = "or";
const char *whileIdentifier = "while";
const char *classIdentifier = "class";
const char *takeIdentifier = "take"; // like switch()
const char *importIdentifier = "import"; // add basics to imports

const char *numIdentifier = "num"; // num science = 5
const char *numDataType = "long long int";

const char *defFileName = "DEF";

def main(int argc, char **argv) returns int
	clock_t start = clock(); // Start the stopwatch

	string_t *inputFilename, *directory;
	// Arguments: [compiler executable] [directory] [directory/inputFile] [directory/outputFile]
	if argc >= 4 then
		printf("[Debug] Successfully accessing the command line arguments!\n");
		int i = 1;
		directory = string_copyvalueof(argv[i]);
		while i < argc - 1 do
			inputFilename = string_copyvalueof(argv[i + 1]);
			startCompiler(directory, inputFilename);
			// Free resources
			string_free(inputFilename);
			i += 3;
		end
	or 
		directory = string_copyvalueof("src");
		inputFilename = string_copyvalueof("src/compl.hr");
		startCompiler(directory, inputFilename);
		// Free resources
		string_free(inputFilename);
	end

	clock_t end = clock(); // End the stopwatch
	double time_spent = (double) (end - start) / CLOCKS_PER_SEC;
	printf("[main] Program Benchmark: %.2f second(s)\n", time_spent);

	// compl com;
	// com.foo = &foo;
return 0

// def foo() returns void
// 	printf("Foo is 5\n");
// return

def startCompiler(string_t *directory, string_t *inputFilename) returns void
	FILE *input = fopen(inputFilename->text, "r");

	compiler_t *com = compiler_init(directory, input);
	ignition(com);
	compiler_free(com);

	fclose(input);
return

def compiler_init(string_t* directory, FILE *inputFile) returns compiler_t*
	compiler_t *com = malloc(sizeof(compiler_t));
	com->allLines = list_init();
	com->cleanedLines = list_init();
	com->parsedLines = list_init();
	com->compiledLines = list_init();

	com->definitions = list_init();
	com->includeStatements = string_init();
	com->classes = list_init();

	com->directory = directory;
	com->inputFile = inputFile;

	com->scope = 0;
	com->currentClass = -1; // currently in no class
return com

def compiler_free(compiler_t *com) returns void
	// for now, it is commented out due to a "free" error
	list_complete_free(&string_free, com->allLines);
	list_complete_free(&string_free, com->parsedLines);
	list_complete_free(&string_free, com->compiledLines);
	free(com);
return

def class_new(string_t *name, string_t *includeStatements) returns class_t*
	class_t *newClass = malloc(sizeof(class_t));
	newClass->name = name;

	// class struct stuff
	newClass->globalVariables = list_init();
	newClass->vTableList = list_init();

	newClass->includeStatements = includeStatements;
	newClass->definitions = list_init();
	newClass->prototypes = list_init();

	newClass->restOfLines = list_init();
return newClass

// VTable stuff //

def vTable_new(string_t *returnType, string_t *name, list_t *parameters, vTable_t *vTable) returns void
	vTable->returnType = string_copyvalueof_s(returnType);
	vTable->name = string_copyvalueof_s(name);
	vTable->parameters = parameters; // TODO: fix this because it does not do copyvalueof()
return

def vTable_delete(vTable_t *vTable) returns void
	string_free(vTable->returnType);
	string_free(vTable->name);
	list_complete_free(&string_free, vTable->parameters);
return

def ignition(compiler_t *com) returns void
	readAllLines(com);
	parse(com);
	compile(com);
	writeToFile(com);
return

def readAllLines(compiler_t *com) returns void
	string_t *line = string_init();
	while !readLine(com->inputFile, line) do
		list_add(string_copyvalueof_s(line), com->allLines);
		string_reset(line);
	end
	string_free(line);
return

private def readLine(FILE *stream, string_t *line) returns bool
	char letter;
	while (letter = fgetc(stream)) != EOF && letter != '\n' do
		string_appendchar(line, letter);
	end	
return letter == EOF

def parse(compiler_t *com) returns void
	for 0 to (int)com->allLines->data_length do i++
		string_t *existingLine = (string_t*) com->allLines->data[i];
		// All the ascii letters except for special ascii characters below ascii number 32
		int firstLetter = strcspn(existingLine->text,
				"!\"#$%&\'()*+,-.//0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~");
		string_t *initialClean = string_substring_s(firstLetter,
				existingLine->text_length, existingLine);
		list_add(initialClean, com->cleanedLines);		
		list_add(split(' ', initialClean), com->parsedLines);
	end
return

private def split(char delimiter, string_t *line) returns list_t*
	list_t *output = list_init();
	string_t *temp = string_init();
	bool isSpecial = false;
	// char previous = NULL;
	for 0 to (int)line->text_length do i++
		char alpha = line->text[i];
		if isSpecialCharacter(alpha) then
			isSpecial = !isSpecial;
		or if !isSpecial && alpha == delimiter then
			list_add(string_copyvalueof_s(temp), output);
			string_reset(temp);
		or
			string_appendchar(temp, alpha);
		end	
	end
	list_add(temp, output);
return output

private def isSpecialCharacter(char alpha) returns bool
	return alpha == '"' || alpha == '\''

def compile(compiler_t *com) returns void
	// add definitions to file
	list_add(string_copyvalueof("#define num long long int"), com->definitions);
	string_t *parsed;
	for 0 to (int) com->parsedLines->data_length do i++
		string_t *line = (string_t*) com->cleanedLines->data[i];

		// continue and ignore the rest if it is a comment! :)
		if string_startswith(line, doubleSlashComment) || string_isempty(line) then
			continue;
		end	

		list_t *tokens = (list_t *) com->parsedLines->data[i];
		string_t *firstToken = (string_t*) tokens->data[0];

		if string_equals(firstToken, classIdentifier) then
			// class blah not class blah extends object
			list_add(class_new(string_copyvalueof_s((string_t*) tokens->data[1]), string_copyvalueof_s(com->includeStatements)), com->classes);
			string_reset(com->includeStatements);

			com->currentClass++;
			continue;

		or if string_equals(firstToken, functionIdentifier) then
			parsed = string_init();
			class_t *currentClass = (class_t*) com->classes->data[com->currentClass];
			handleFunction(line, currentClass, com, parsed);
			com->scope++;

		or if string_startswith(line, privateFunctionIdentifier) then
			parsed = string_init();
			class_t *currentClass = (class_t*) com->classes->data[com->currentClass];
			handlePrivateFunction(line, currentClass, com, parsed);
			com->scope++;
			
		or if string_equals(firstToken, returnIdentifier) then
			parsed = string_init();
			if com->scope == 1 then
				string_printf(parsed, "%s;\n}", line->text);
				list_add(parsed, ((class_t*) com->classes->data[com->currentClass])->restOfLines);
				com->scope--;
				continue;
			or
				string_printf(parsed, "%s", line->text);
			end	
			// or the return is inside a function

		or if string_startswith(line, endIdentifier) then
			parsed = string_copyvalueof("}");
			list_add(parsed, ((class_t*) com->classes->data[com->currentClass])->restOfLines);
			com->scope--;
			continue;
			// TODO: please fix this mess

		or if string_startswith(line, ifIdentifier) then
			// if blah then
			parsed = string_init();
			string_t *middle = string_substring_s(strlen(ifIdentifier), line->text_length - strlen(thenKeyword), line);
			string_printf(parsed, "if (%s) {", middle->text);
			com->scope++;

		or if string_startswith(line, elseIfIdentifier) then
			parsed = string_init();
			string_t *middle = string_substring_s(strlen(elseIfIdentifier), line->text_length - strlen(thenKeyword), line);
			string_printf(parsed, "} else if (%s) {", middle->text);
		
		or if string_startswith(line, elseIdentifier) then
			parsed = string_init();
			string_append(parsed, "} else {");

		or if string_startswith(line, forIdentifier) then
			// for i to 5 do i++
			parsed = string_init();
			handleForLoop(line, parsed);
			com->scope++;
		
		or if string_startswith(line, whileIdentifier) then
			// while blah do
			parsed = string_init();
			string_t *condition = string_substring_s(strlen(whileIdentifier), string_indexof_s(line, "do"), line);
			string_printf(parsed, "while (%s) {", condition->text);

			com->scope++;

		or if string_startswith(line, importIdentifier) then
			// add basics to imports
			string_t *includeStatement = string_init();
			string_t *importItem = string_substring_s(strlen(importIdentifier) + 1, line->text_length, line);

			if string_startswith(importItem, "basics") then
				string_append(includeStatement, "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n");
				string_printf(includeStatement, "#include \"__%s__.h\"", defFileName);
			or
				string_printf(includeStatement, "#include \"%s.h\"", importItem->text);	
			end
			string_append_s(com->includeStatements, includeStatement);
			string_append(com->includeStatements, "\n");

			// Free resources and continue
			string_free(includeStatement);
			string_free(importItem);
			continue; // don't add it to the restOfLines list
		or
			parsed = line;
		end

		if com->classes->data_length > 0 && com->scope > 0 then
			list_add(parsed, ((class_t*) com->classes->data[com->currentClass])->restOfLines);
		or if com->classes->data_length > 0 && com->scope <= 0 then
			addDefinitionToHeader(parsed, com);
		end	

	end
return

// Handling certain declarations //

private def handleForLoop(string_t *line, string_t *dest) returns void
	// for 0 to 5 do i++
	string_t *startPoint = string_substring_s(strlen(forIdentifier), string_indexof_s(line, toKeyword), line);
	string_t *endPoint = string_substring_s(string_indexof_s(line, toKeyword) + strlen(toKeyword), string_indexof_s(line, doKeyword), line);
	
	string_t *lineAfterDo = string_substring_s(string_indexof_s(line, doKeyword) + strlen(doKeyword), line->text_length, line);
	string_t *conditionName = string_substring_s(0, string_indexof_s(lineAfterDo, "+"), lineAfterDo);
	string_t *incrementValue = string_substring_s(string_indexof_s(lineAfterDo, "+"), lineAfterDo->text_length, lineAfterDo);

	string_printf(dest, "for (num %s = %s; %s < %s; %s%s) {", conditionName->text, startPoint->text, conditionName->text, endPoint->text, conditionName->text, incrementValue->text);

	// Free resources
	string_free(startPoint);
	string_free(endPoint);
	string_free(lineAfterDo);
	string_free(conditionName);
	string_free(incrementValue);
return

private def handleFunction(string_t *contextLine, class_t *currentClass, compiler_t *com, string_t *dest) returns void
	// EXAMPLE: def blah() returns void
	string_t *functName = string_substring_s(strlen(functionIdentifier) + 1, string_indexof_s(contextLine, "("), contextLine);
	string_t *functBody = string_substring_s(string_indexof_s(contextLine, "(") + 1, string_lastindexof_s(contextLine, ")"), contextLine);
	string_t *returnType = string_substring_s(string_lastindexof_s(contextLine, "returns") + strlen("returns"), contextLine->text_length, contextLine);

	string_printf(dest, "%s %s(%s)", returnType->text, functName->text, functBody->text);
	if !string_equals(functName, "main") then
		addFunctionHeader(dest, com); // Add function header thing "void foo()" to the top of the source file
	end
	string_append(dest, " {"); // complete the function header to be added to source in the future

	// Add function to vTable
	list_add(functionToVTable(returnType, functName, functBody), currentClass->vTableList);

	// Free resources
	string_free(functName);
	string_free(functBody);
	string_free(returnType);
return

// IDEA: String *str = "hello" is heap string and String str = "hello" is stack string
private def functionToVTable(string_t *returnType, string_t *functName, string_t *functBody) returns vTable_t*
	list_t *parameters = split(',', functBody);
	vTable_t *vTable = malloc(sizeof(vTable_t));
	vTable_new(returnType, functName, parameters, vTable);
return vTable

private def handlePrivateFunction(string_t *contextLine, class_t *currentClass, compiler_t *com, string_t *dest) returns void
	// EXAMPLE: private def blah() returns void
	string_t *functionName = string_substring_s(strlen(privateFunctionIdentifier) + 1, string_indexof_s(contextLine, "("), contextLine);
	string_t *functionBody = string_substring_s(strlen(privateFunctionIdentifier) + 1, string_indexof_s(contextLine, "returns"), contextLine);
	string_t *returnType = string_substring_s(string_indexof_s(contextLine, "returns") + strlen("returns"), contextLine->text_length, contextLine);
	string_printf(dest, "static %s %s", returnType->text, functionBody->text);

	addFunctionHeader(dest, com);
	string_append(dest, " {");

	// Free resources
	string_free(functionName);
	string_free(functionBody);
	string_free(returnType);
return

// Helper functions //

private def addFunctionHeader(string_t *functionBody, compiler_t *com) returns void
	string_t *funct = string_init();
	string_printf(funct, "%s;", functionBody->text);
	list_add(funct, ((class_t*)com->classes->data[com->currentClass])->prototypes);
return

private def addDefinitionToHeader(string_t *definition, compiler_t *com) returns void
	list_add(definition, ((class_t*) com->classes->data[com->currentClass])->definitions);
return

def writeToFile(compiler_t *com) returns void
	// Write to definition header
	writeToDefFile(com->directory, com->definitions);

	// Write all classes
	for 0 to com->classes->data_length do i++
		class_t *currentClass = (class_t*) com->classes->data[i];
		string_t *fullHeaderPath = string_init();
		string_t *fullSourcePath = string_init();
		string_printf(fullHeaderPath, "src/%s.h", currentClass->name->text);
		string_printf(fullSourcePath, "src/%s.c", currentClass->name->text);

		writeToHeaderFile(fullHeaderPath, currentClass);
		writeToSourceFile(fullSourcePath, currentClass);
		
		string_free(fullHeaderPath);
		string_free(fullSourcePath);
	end	
return

// NOTE: the double underscore before files is used to indicate that the file is specific to our language
private def writeToDefFile(string_t *directory, list_t *definitionsList) returns void
	string_t *fullDefPath = string_init();	
	string_printf(fullDefPath, "%s/__%s__.h", directory->text, defFileName);
	
	FILE *definitions = fopen(fullDefPath->text, "w");
	fprintf(definitions, "// This file was automatically generated by the horse compiler\n");
	fprintf(definitions, "#ifndef %s_H_\n", defFileName);
	fprintf(definitions, "#define %s_H_\n", defFileName);
	for 0 to definitionsList->data_length do i++
		fprintf(definitions, "%s\n", ((string_t *) definitionsList->data[i])->text);
	end
	fprintf(definitions, "#endif\n");

	// Free resources
	string_free(fullDefPath);
	fclose(definitions);
return

private def writeToHeaderFile(string_t *fullHeaderPath, class_t *currentClass) returns void
	// Add necessary header components
	FILE *headerFile = fopen(fullHeaderPath->text, "w");
	fprintf(headerFile, "// This file was automatically generated by the horse compiler\n");
	fprintf(headerFile, "#ifndef %s_H_\n", currentClass->name->text);
	fprintf(headerFile, "#define %s_H_\n", currentClass->name->text);
	fprintf(headerFile, "#include \"__%s__.h\"\n", defFileName); // core definitions of Horse

	// Add header stuff
	fprintf(headerFile, "%s\n", currentClass->includeStatements->text);

	// Add global variables and other misc stuff
	for 0 to currentClass->definitions->data_length do j++
		fprintf(headerFile, "%s\n", ((string_t*) currentClass->definitions->data[j])->text);
	end	

	// Add the class struct
	string_t *classStruct = string_init();
	getClassStruct(currentClass, classStruct);
	fprintf(headerFile, "%s\n", classStruct->text);
	
	fprintf(headerFile, "#endif\n");
	fclose(headerFile);
return

private def getClassStruct(class_t *currentClass, string_t *cls) returns void
	string_printf(cls, "typedef struct %s %s;\n", currentClass->name->text, currentClass->name->text);
	string_printf(cls, "struct %s {\n", currentClass->name->text);
	for 0 to currentClass->vTableList->data_length do i++
		vTable_t *vTable = (vTable_t*) currentClass->vTableList->data[i];
		string_t *parametersStr = string_init();
		paramListToStr(vTable->parameters, parametersStr);
		// LEARNED: string_printf APPENDS and doesn't emulate the behavior of sprintf
		string_printf(cls, "%s (*%s) (%s);\n", vTable->returnType->text, vTable->name->text, parametersStr->text);
		string_free(parametersStr);
	end
	string_printf(cls, "};\n");
return

private def paramListToStr(list_t *params, string_t *dest) returns void
	for 0 to params->data_length do i++
		string_t *param = (string_t*) params->data[i];
		string_append_s(dest, param);
		if i < params->data_length - 1 then
			string_append(dest, ",");
		end
	end		
return
	
private def writeToSourceFile(string_t *fullSourcePath, class_t *currentClass) returns void
	// Add necessary source components
	FILE *sourceFile = fopen(fullSourcePath->text, "w");
	fprintf(sourceFile, "// This file was automatically generated by the horse compiler\n");
	fprintf(sourceFile, "#include \"%s.h\"\n", currentClass->name->text);

	// Add the function prototypes
	for 0 to currentClass->prototypes->data_length do j++
		fprintf(sourceFile, "%s\n", ((string_t*)currentClass->prototypes->data[j])->text);
	end
	
	// Add everything else
	for 0 to currentClass->restOfLines->data_length do j++
		fprintf(sourceFile, "%s\n", ((string_t*) currentClass->restOfLines->data[j])->text);	
		// Debug print stuff	
		fprintf(stdout, "[writeToSourceFile] writing: %s\n", ((string_t*) currentClass->restOfLines->data[j])->text);		
	end
	fclose(sourceFile);
return

////// LIBRARIES //////

def list_init() returns list_t*
	list_t *list = malloc(sizeof(list_t));
	list->data = (void**) malloc(LIST_MANAGER_ALLOC_SIZE * sizeof(void*));
	list->data_length = 0;
	list->data_allocated_length = LIST_MANAGER_ALLOC_SIZE;
return list

private def custom_list_init(size_t mallocSize) returns list_t*
	list_t *list = malloc(sizeof(list_t));
	list->data = (void**) malloc(mallocSize * sizeof(void*));

	list->data_length = 0;
	list->data_allocated_length = mallocSize;
return list

def list_add(void *item, list_t *list) returns void
	list_meminspector(1, list);
	list->data[list->data_length] = item;
	list->data_length++;
return

def list_remove(int index, list_t *list) returns void
	unsigned bytes = sizeof(void*) * (list->data_allocated_length - index - 1);
	memmove(&list->data[index], &list->data[index+1], bytes);
	list->data_length--;
return

def list_complete_remove(void (*indivfree)(void*), int index, list_t *list) returns void
	(*indivfree)(list->data[index]); // frees it from the respective free method for the unknown type data
	list_remove(index, list);
return

def list_clear(list_t *list) returns void
	list->data_length = 0;
return

def list_equals(void *destComp, int index, bool (*equalsComparator)(void*, void*), list_t *list) returns bool
	if index < 0 || index >= (int)list->data_length then
		throw_exception(INDEX_OUT_OF_BOUNDS_EXCEPTION, -1,
				"Tried to access a list in index %d that was out of bounds!",
				index);
	end
return (*equalsComparator)(destComp, list->data[index]);

def list_contains(void *destComp, bool (*equalsComparator)(void*, void*), list_t *list) returns bool
	for 0 to (int) list->data_length do i++
		if (*equalsComparator)(destComp, list->data[i]) then
			return true;
		end	
	end
return false

def list_serialize(void (*indiv)(void*, FILE*), FILE *stream, list_t *list) returns void
	fwrite(&list->data_length, sizeof(list->data_length), 1, stream);
	for 0 to (int)list->data_length do i++
		(*indiv)(list->data[i], stream);
	end	
return

def list_deserialize(void* (*indivreverse)(FILE*), FILE *stream) returns list_t*
	int arrayLength;
	fread(&arrayLength, sizeof(int), 1, stream);

	list_t *list = custom_list_init(arrayLength);
	for 0 to arrayLength do i++
		list_add((*indivreverse)(stream), list);
	end
return list

def list_free(list_t *list) returns void
	free(list->data);
	free(list);
return

def list_complete_free(void (*indivfree)(void*), list_t *list) returns void
	for 0 to (int)list->data_length do i++
		(*indivfree)(list->data[i]);
	end	
	list_free(list);
return

private def list_meminspector(size_t addNum, list_t *subject) returns void
	if subject->data_length + addNum >= subject->data_allocated_length then
		size_t newSize = 1.5 * subject->data_allocated_length + addNum;
		void **new_ptr = (void**) realloc(subject->data,
				newSize * sizeof(void*));
		if new_ptr == NULL then
			throw_exception(NULL_POINTER_EXCEPTION, -1,
					"Unable to allocate memory for list with length %d!",
					subject->data_length);
		end			

		subject->data = new_ptr;
		subject->data_allocated_length = newSize;
	end
return

def string_init() returns string_t*
	string_t *str = malloc(sizeof(string_t));

	str->text = malloc(STRING_ALLOCATION_SIZE * sizeof(char));
	str->text[0] = '\0';

	str->text_length = 0;
	str->text_allocated_length = STRING_ALLOCATION_SIZE;
return str

private def custom_string_init(size_t allocationSize) returns string_t*
	string_t *str = malloc(sizeof(string_t));

	str->text = malloc(allocationSize);
	str->text[0] = '\0';

	str->text_length = 0;
	str->text_allocated_length = allocationSize;
return str

def string_copyvalueof(char *src) returns string_t*
	size_t srcLength = strlen(src);

	string_t *dest = malloc(sizeof(string_t));
	dest->text = strdup(src);
	dest->text_length = srcLength;
	dest->text_allocated_length = srcLength + 1;
return dest

def string_copyvalueof_s(string_t *src) returns string_t*
	string_t *dest = malloc(sizeof(string_t));
	dest->text = strdup(src->text);
	dest->text_length = src->text_length;
	dest->text_allocated_length = src->text_length + 1;
return dest

def string_printf(string_t *dest, char *format, ...) returns void
	va_list args;
	va_start(args, format);
	int argsLength = strlen(format);
	for 0 to argsLength do i++
		char first = format[i];
		char second = (i + 1 < argsLength) ? format[i+1] : '\0';
		char *arg;
		if first == '%' && second == 's' then
			arg = va_arg(args, char*);
			i++;
		or
			arg = malloc(2 * sizeof(char));
			arg[0] = first;
			arg[1] = '\0';
		end
		int argLength = strlen(arg);
		string_meminspection(argLength, dest);
		strncat(dest->text, arg, argLength);
		dest->text_length += argLength;
	end
	va_end(args);
return

def string_append(string_t *dest, char *src) returns void
	int srcLength = strlen(src);
	string_meminspection(srcLength, dest);

	strncat(dest->text, src, srcLength);
	dest->text_length += srcLength;
return

def string_append_s(string_t *dest, string_t *src) returns void
	string_meminspection(src->text_length, dest);
	strncat(dest->text, src->text, src->text_length);
	dest->text_length += src->text_length;
return

def string_appendchar(string_t *dest, char letter) returns void
	string_meminspection(1, dest);
	char text[2];
	text[0] = letter;
	text[1] = '\0';
	strcat(dest->text, text);
	dest->text_length++;
return

// Checks if the string length == 0 or if the string only contains whitespace
def string_isempty(string_t *str) returns bool
	if str->text_length == 0 then
		return true;
	or
		for 0 to str->text_length do i++
			if !isspace(str->text[i]) then
				return false;
			end
		end
	end	
return true

/*
	returns -1 if no stopSign was found
*/
def string_indexof_s(string_t *src, char *stopSign) returns int
	int stopSignLength = strlen(stopSign);
	bool found = true;
	for 0 to (int) src->text_length - stopSignLength + 1 do i++
		for 0 to stopSignLength do j++
			if src->text[i+j] != stopSign[j] then
				found = false;
				break;
			end
		end
		if found then
			return i;
		or
			found = true;
		end	
	end
return -1

def string_lastindexof_s(string_t *src, char *stopSign) returns int
	int stopSignLength = strlen(stopSign);
	int lastIndexFound = -1;
	bool found = true;
	for 0 to src->text_length - stopSignLength + 1 do i++
		for 0 to stopSignLength do j++
			if src->text[i+j] != stopSign[j] then
				found = false;
				break;
			end
		end
		if found then
			lastIndexFound = i;
			found = false;
		or	
			found = true;
		end
	end
return lastIndexFound

def string_split(char delimiter, string_t *src) returns string_t**
	// Safety
	// If the string is length 2 or less, then it is not possible to split the string
	if src->text_length <= 2 then
		throw_exception(INDEX_OUT_OF_BOUNDS_EXCEPTION, -1,
				"Unable to substring a string with %d length!",
				src->text_length);
	end			

	char delimiterText[2];
	delimiterText[0] = delimiter;
	delimiterText[1] = '\0';
	int splitIndex = strcspn(src->text, delimiterText);

	// Was splitIndex == src->text
	if splitIndex == (int)src->text_length then
		return NULL;
	end

	string_t **strList = malloc(2 * sizeof(string_t));
	strList[0] = custom_string_init(src->text_length / 2);
	strList[1] = custom_string_init(src->text_length / 2);

	for 0 to splitIndex do i++
		string_appendchar(strList[0], src->text[i]);
	end
	// for splitIndex + 1 to src->text_length do i++
	for 0 to (int) src->text_length do i++
		string_appendchar(strList[1], src->text[(splitIndex + 1) + i]);
	end
return strList

def string_equals(string_t *dest, const char *src) returns bool
	unsigned srcLength = strlen(src);
	if dest->text_length != srcLength then
		return false;
	or
		return strncmp(dest->text, src, srcLength) == 0;
	end	
end

def string_equals_s(string_t *dest, string_t *src) returns bool
	if dest->text_length != src->text_length then
		return false;
	or
		return strncmp(dest->text, src->text, src->text_length) == 0;
	end	
end	

def string_equalsignorecase(string_t *dest, const char *src) returns bool
	if dest->text_length != strlen(src) then
		return false;
	or 
		for 0 to (int)dest->text_length do i++
			if tolower(dest->text[i]) != tolower(src[i]) then
				return false;
			end	
		end	
		return true;
	end
end	

def string_equalsignorecase_s(string_t *dest, string_t *src) returns bool
	if dest->text_length != src->text_length then
		return false;
	or
		for 0 to (int)dest->text_length do i++
			if (tolower(dest->text[i]) != tolower(src->text[i])) then
				return false;
			end	
		end
		return true;
	end
end	

def string_startswith_s(string_t *src, string_t *search) returns bool
	if search->text_length > src->text_length then
		return false;
	or
		for 0 to (int)search->text_length do i++
			if src->text[i] != search->text[i] then
				return false;
			end	
		end
	end	
return true

def string_startswith(string_t *src, const char *search) returns bool
	unsigned searchLength = strlen(search);
	if searchLength > src->text_length then
		return false;
	end
	for 0 to searchLength do i++
		if src->text[i] != search[i] then
			return false;
		end	
	end
return true

def string_substring_s(int startIndex, int endIndex, string_t *src) returns string_t*
	size_t totalAppend = endIndex - startIndex; // 1 - 0
	if totalAppend > src->text_length then
		throw_exception(INDEX_OUT_OF_BOUNDS_EXCEPTION, -1,
				"Unable to substring a string starting from index %d and ending %d",
				startIndex, endIndex);
	end
	string_t *newStr = custom_string_init(totalAppend + 2);
	strncpy(newStr->text, src->text + startIndex, totalAppend);
	newStr->text[totalAppend] = '\0';
	newStr->text_length = totalAppend;
return newStr

def string_tolowercase_s(string_t *dest) returns void
	for 0 to (int)dest->text_length do i++
		dest->text[i] = tolower(dest->text[i]);
	end	
return

def string_serialize(string_t *src, FILE *stream) returns bool
	fwrite(&src->text_length, sizeof(int), 1, stream);
	fwrite(src->text, sizeof(char), src->text_length, stream);
return true

def string_deserialize(FILE *stream) returns string_t*
	int textLength;
	fread(&textLength, sizeof(int), 1, stream);

	string_t *str = custom_string_init(textLength + STRING_ALLOCATION_SIZE);
	fread(str->text, sizeof(char), textLength, stream);
	str->text_length = textLength;
return str

def string_reset(string_t *dest) returns void
	dest->text[0] = '\0';
	dest->text_length = 0;
return

def string_free(void *dest) returns void
	free(((string_t*) dest)->text);
// Free the structure itself
	free(((string_t*) dest));
return

// Memory related functions
private def string_meminspection(size_t addNum, string_t *subject) returns void
	// +1 for accounting the null terminator
	if subject->text_length + addNum + 1 >= subject->text_allocated_length then
		size_t newSize = 1.5 * subject->text_allocated_length + addNum + 1;
		char *tempStr = (char *) realloc(subject->text, newSize);
		// Safety
		if tempStr == NULL then
			throw_exception(NULL_POINTER_EXCEPTION, -1,
					"Unable to allocate memory for string while doing meminspection!\n");
		end			
		subject->text = tempStr;
		subject->text_allocated_length = newSize;
	end
return

// TODO: add a predefined message for errors like index out of bounds exception, etc.
def throw_exception(exception e, int lineNum, char *message, ...) returns void
	va_list args;
	va_start(args, message);
	char cMessage[AVG_STRING_SIZE];
	if lineNum == -1 then
		strncpy(cMessage, "Internal Error [", AVG_STRING_SIZE);
		vsnprintf(cMessage, AVG_STRING_SIZE, message, args);
		strcat(cMessage, "]"); 
	or 
		snprintf(cMessage, AVG_STRING_SIZE, "Line #%d", lineNum);
	end
	va_end(args);

// Goes through the different types of error and prints out the appropriate message
	switch (e) {
	case ERRNO_EXCEPTION:
		perror(cMessage);
		break;
	case NULL_POINTER_EXCEPTION:
		fprintf(stderr, "%s: %s\n", cMessage, message);
		break;
	case INDEX_OUT_OF_BOUNDS_EXCEPTION:
		fprintf(stderr, "%s: %s\n", cMessage, message);
		break;
	default:
		break;
	}
return
